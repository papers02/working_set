#This patch should be applied on xen 4.2. Download it from the link below
#https://www.xenproject.org/downloads/xen-archives/supported-xen-42-series/xen-420.html

diff -ru xen-4.2.0/tools/ocaml/libs/xb/xb.mli xen-4.2.0_1st/tools/ocaml/libs/xb/xb.mli
--- xen-4.2.0/tools/ocaml/libs/xb/xb.mli	2012-09-17 12:21:18.000000000 +0200
+++ xen-4.2.0_1st/tools/ocaml/libs/xb/xb.mli	2017-04-30 06:40:08.250156903 +0200
@@ -23,7 +23,7 @@
       | Resume
       | Set_target
       | Restrict
-      | Invalid (* Not a valid wire operation *)
+      | Invalid
     val operation_c_mapping : operation array
     val size : int
     val array_search : 'a -> 'a array -> int
diff -ru xen-4.2.0/xen/arch/x86/mm/shadow/multi.c xen-4.2.0_1st/xen/arch/x86/mm/shadow/multi.c
--- xen-4.2.0/xen/arch/x86/mm/shadow/multi.c	2012-09-17 12:21:19.000000000 +0200
+++ xen-4.2.0_1st/xen/arch/x86/mm/shadow/multi.c	2017-04-25 19:53:14.450074358 +0200
@@ -2999,10 +2999,13 @@
     p2m_type_t p2mt;
     uint32_t rc;
     int version;
+    unsigned int i;  
 #if SHADOW_OPTIMIZATIONS & SHOPT_FAST_EMULATION
     int fast_emul = 0;
 #endif
 
+//   printk("hello world\n");
+//    printk("total pages = %u total = %u\n",d->tot_pages, total);
     SHADOW_PRINTK("d:v=%u:%u va=%#lx err=%u, rip=%lx\n",
                   v->domain->domain_id, v->vcpu_id, va, regs->error_code,
                   regs->eip);
@@ -3186,6 +3189,16 @@
     gfn = guest_l1e_get_gfn(gw.l1e);
     gmfn = get_gfn(d, gfn, &p2mt);
 
+   for(i = 0; i< 100; i++)
+   {
+	if(gmfn == d->ws->inv_pages[i] && d->ws->test_inv[i] == 0)
+	{
+//		printk("matched page %u\n", d->ws->inv_pages[i]);
+		d->ws->test_inv[i] = 1;
+		d->ws->tot_access++;
+	}
+   }
+
     if ( shadow_mode_refcounts(d) && 
          ((!p2m_is_valid(p2mt) && !p2m_is_grant(p2mt)) ||
           (!p2m_is_mmio(p2mt) && !mfn_valid(gmfn))) )
diff -ru xen-4.2.0/xen/common/domain.c xen-4.2.0_1st/xen/common/domain.c
--- xen-4.2.0/xen/common/domain.c	2012-09-17 12:21:19.000000000 +0200
+++ xen-4.2.0_1st/xen/common/domain.c	2017-04-25 19:53:12.822073951 +0200
@@ -40,7 +40,8 @@
 #include <xsm/xsm.h>
 #include <xen/trace.h>
 #include <xen/tmem.h>
-
+#include <xen/random.h>
+#include <asm/shadow.h>
 /* Linux config option: propageted to domain0 */
 /* xen_processor_pmbits: xen control Cx, Px, ... */
 unsigned int xen_processor_pmbits = XEN_PROCESSOR_PM_PX;
@@ -189,7 +190,40 @@
         extra_dom0_irqs = simple_strtoul(s, &s, 0);
 }
 custom_param("extra_guest_irqs", parse_extra_guest_irqs);
+void ws_handler(void * var)
+{
+    struct domain *d = var;
+    unsigned int i=0, j, teste;
+    struct page_info *page;
+    unsigned long rand;
+    unsigned int mem;
+    if(d->domain_id <= 0 || d->domain_id>20)
+    	return;
+    mem = d->ws->tot_access*d->tot_pages*4/100;
+    printk("working set =  %u access = %u\n", mem, d->ws->tot_access);
+    d->ws->tot_access = 0;
+    for(i=0; i<100; i++)
+    {
+	j =0;
+	rand = ((unsigned long)get_random()) % d->tot_pages;
+	page_list_for_each(page, &d->page_list)
+	{
+		if(rand == j)
+		{
+			d->ws->inv_pages[i] = page_to_mfn(page);
+			teste = sh_remove_all_mappings(d->vcpu[0], page_to_mfn(page));
+			d->ws->test_inv[i] = 0;
+			break;
+		}
+		j++;
+	}
+//	printk("rand = %lu\n", rand);
+    }
+    
+    flush_tlb_all();
+    set_timer(d->ws->timer, NOW()+SECONDS(60));
 
+}
 struct domain *domain_create(
     domid_t domid, unsigned int domcr_flags, uint32_t ssidref)
 {
@@ -306,6 +340,15 @@
         rcu_assign_pointer(domain_hash[DOMAIN_HASH(domid)], d);
         spin_unlock(&domlist_update_lock);
     }
+/*working set initialization*/
+   if(domid > 0 && domid < 20)
+    {
+        printk("%u\n", domid);
+        d->ws = xzalloc(struct working_set);
+        d->ws->timer = xzalloc(struct timer);
+        init_timer(d->ws->timer, ws_handler, d, 0);
+        set_timer(d->ws->timer, NOW()+ SECONDS(30));
+    }
 
     return d;
 
diff -ru xen-4.2.0/xen/include/xen/sched.h xen-4.2.0_1st/xen/include/xen/sched.h
--- xen-4.2.0/xen/include/xen/sched.h	2012-09-17 12:21:20.000000000 +0200
+++ xen-4.2.0_1st/xen/include/xen/sched.h	2017-04-25 19:53:13.466074112 +0200
@@ -217,6 +217,15 @@
     struct mem_event_domain access;
 };
 
+/*working set struct*/
+struct working_set
+{
+   unsigned int  inv_pages[100];
+   unsigned int  test_inv[100];
+   unsigned int  tot_access;
+   struct timer *timer;
+};
+
 struct domain
 {
     domid_t          domain_id;
@@ -235,7 +244,8 @@
     unsigned int     xenheap_pages;   /* # pages allocated from Xen heap    */
 
     unsigned int     max_vcpus;
-
+/*working set*/
+   struct working_set *ws;
     /* Scheduling. */
     void            *sched_priv;    /* scheduler-specific data */
     struct cpupool  *cpupool;
--- /dev/null	2017-04-29 00:49:44.595570342 +0200
+++ xen-4.2.0/xen/include/xen/random.h	2017-04-25 19:53:13.462074111 +0200
@@ -0,0 +1,76 @@
+#ifndef __XEN_RANDOM_H__
+#define __XEN_RANDOM_H__
+
+unsigned int get_random(void);
+
+/* The value keeps unchange once initialized for each booting */
+extern unsigned int boot_random;
+
+#endif /* __XEN_RANDOM_H__ */
+
+
+#include <xen/cache.h>
+#include <xen/init.h>
+#include <xen/percpu.h>
+//#include <xen/random.h>
+#include <xen/time.h>
+#include <asm/random.h>
+
+static DEFINE_PER_CPU(unsigned int, seed);
+unsigned int __read_mostly boot_random;
+
+unsigned int get_random(void)
+{
+    unsigned int next = this_cpu(seed), val = arch_get_random();
+
+    if ( unlikely(!next) )
+        next = val ?: NOW();
+
+    if ( !val )
+    {
+        unsigned int i;
+
+        for ( i = 0; i < sizeof(val) * 8; i += 11 )
+        {
+            next = next * 1103515245 + 12345;
+            val |= ((next >> 16) & 0x7ff) << i;
+        }
+    }
+
+    this_cpu(seed) = next;
+
+    return val;
+}
+
+static int __init init_boot_random(void)
+{
+    boot_random = get_random();
+    return 0;
+}
+__initcall(init_boot_random);
+
+
+
+/*
+//#include <linux/random.h>
+#include <xen/cache.h>
+#include <xen/init.h>
+#include <xen/percpu.h>
+//#include <xen/random.h>
+#include <xen/time.h>
+//#include <asm/random.h>
+
+//static DEFINE_PER_CPU(unsigned int, seed);
+//unsigned int __read_mostly boot_random;
+
+unsigned int get_random(void)
+{
+    unsigned int val;
+
+	val = (unsigned int) get_s_time()*2+3;// SECONDS; //(System.currentTimeMillis());
+//	get_random_bytes(&val, sizeof(unsigned int));
+//	get_random_bytes(&i, sizeof(int));
+
+    return val;
+}
+*/
--- /dev/null	2017-04-29 00:49:44.595570342 +0200
+++ xen-4.2.0/xen/include/asm-x86/random.h	2017-04-25 19:53:13.594074144 +0200
@@ -0,0 +1,15 @@
+#ifndef __ASM_RANDOM_H__
+#define __ASM_RANDOM_H__
+
+#include <asm/processor.h>
+
+    static inline unsigned int arch_get_random(void)
+    {
+        unsigned int val = 0;
+
+        if ( cpu_has(&current_cpu_data, X86_FEATURE_RDRAND) )
+            asm volatile ( ".byte 0x0f,0xc7,0xf0" : "+a" (val) );
+
+        return val;
+ }
+#endif /* __ASM_RANDOM_H__ */
